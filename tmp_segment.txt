            col = 0;
        }
        col += w;
    }
    (line as u16, col as u16)
}

#[cfg(test_disabled)]
mod tests {
    use super::*;
    use unicode_segmentation::UnicodeSegmentation;

    #[test]
    fn wrap_basic_ascii() {
        let s = "abcdef";
        let g: Vec<&str> = s.graphemes(true).collect();
        assert_eq!(measure_total_lines(s, 5), 2);
        assert_eq!(measure_prefix_line(&g, 5, 5), 0);
        assert_eq!(measure_prefix_line_col(&g, 5, 5), (0, 5));
        assert_eq!(measure_prefix_line(&g, 6, 5), 1);
        assert_eq!(measure_prefix_line_col(&g, 6, 5), (1, 1));
    }

    #[test]
    fn wrap_with_newline() {
        let s = "ab\ncdef";
        let g: Vec<&str> = s.graphemes(true).collect();
        assert_eq!(measure_total_lines(s, 80), 2);
        assert_eq!(measure_prefix_line_col(&g, 2, 80), (0, 2));
        let upto = 2 + 1 + 2;
        assert_eq!(measure_prefix_line_col(&g, upto, 80), (1, 2));
    }

    #[test]
    fn wrap_fullwidth_chars() {
        let s = "ä½ å¥½ä½?;
        let g: Vec<&str> = s.graphemes(true).collect();
        assert_eq!(measure_total_lines(s, 4), 2);
        assert_eq!(measure_prefix_line_col(&g, 2, 4), (0, 4));
        assert_eq!(measure_prefix_line_col(&g, 3, 4), (1, 2));
    }
}
